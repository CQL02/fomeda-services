import { IProductService } from "../interfaces/product.service.interface";
import { ProductRepository } from "../../domain/repositories/product.repository";
import { ProductSpecificationRepository } from "../../domain/repositories/product-specification.repository";
import { ProductDto } from "../../dtos/product.dto";
import { ICategoryService } from "../../../category/services/interfaces/category.service.interface";
import { ProductMapper } from "../mapper/product.mapper";
import { ProductListFilterDto } from "../../dtos/product-list-filter.dto";
import { ISubcategorySpecificationService } from "../../../category/services/interfaces/subcategory-specification.service.interface";
import { IAuthenticationService } from '../../../authentication/services/interfaces/authentication.service.interface';
import { ProductVerificationRepository } from "../../domain/repositories/product-verification.respository";
import { ProductVerificationSpecificationRepository } from "../../domain/repositories/product-verification-specification.repository";
import { Request } from "express";
export declare class ProductService implements IProductService {
    private readonly productRepository;
    private readonly productSpecificationRepository;
    private readonly productVerificationRepository;
    private readonly productVerificationSpecificationRepository;
    private readonly productMapper;
    private readonly categoryService;
    private readonly subcategorySpecificationService;
    private readonly authenticationService;
    constructor(productRepository: ProductRepository, productSpecificationRepository: ProductSpecificationRepository, productVerificationRepository: ProductVerificationRepository, productVerificationSpecificationRepository: ProductVerificationSpecificationRepository, productMapper: ProductMapper, categoryService: ICategoryService, subcategorySpecificationService: ISubcategorySpecificationService, authenticationService: IAuthenticationService);
    createProduct(productDto: ProductDto): Promise<boolean>;
    getProductDetailsById(id: string): Promise<ProductDto>;
    getProductListByFilter(req: Request, productListFilterDto: ProductListFilterDto): Promise<ProductDto[]>;
    updateProductDetailsById(id: string, productDto: ProductDto): Promise<boolean>;
    updateProductIsActive(id: string): Promise<boolean>;
    deleteProductById(id: string): Promise<boolean>;
    createProductVerification(req: Request, productDto: ProductDto): Promise<boolean>;
    private mapSpecificationsWithVerificationId;
    getProductVerificationDetailsById(id: string): Promise<ProductDto>;
    private populateSpecDetails;
    private calculateRecommendScore;
    getProductVerificationListByFilter(req: Request, productListFilterDto: ProductListFilterDto): Promise<ProductDto[]>;
    private getCategoryAndSubcategoryMapByCatIds;
    private getUsernameMapByUserIds;
    updateProductVerificationDetailsById(req: Request, id: string, productDto: ProductDto): Promise<boolean>;
    updateProductVerificationReviewById(req: Request, id: string, productDto: ProductDto): Promise<boolean>;
    deleteProductVerificationDetailsById(id: string): Promise<boolean>;
}
