import { IAuthenticationService } from '../interfaces/authentication.service.interface';
import { UserDto } from '../../dtos/user.dto';
import { UserRepository } from '../../domain/repositories/user.repository';
import { SupplierDto } from '../../dtos/supplier.dto';
import { SupplierRepository } from '../../domain/repositories/supplier.repository';
import { AdminDto } from '../../dtos/admin.dto';
import { AdminRepository } from '../../domain/repositories/admin.repository';
import { ISessionService } from '../interfaces/session.service.interface';
import { JwtService } from '@nestjs/jwt';
import { IRoleService } from '../../../role/services/interfaces/role.service.interface';
import { MailerService } from '../../../mailer/mailer.service';
import { OtpRepository } from '../../domain/repositories/otp.repository';
import { OtpDto } from '../../dtos/otp.dto';
import { Response } from 'express';
export declare class AuthenticationService implements IAuthenticationService {
    private readonly userRepository;
    private readonly supplierRepository;
    private readonly adminRepository;
    private readonly otpRepository;
    private readonly jwtService;
    private readonly mailerService;
    private readonly sessionService;
    private readonly roleService;
    constructor(userRepository: UserRepository, supplierRepository: SupplierRepository, adminRepository: AdminRepository, otpRepository: OtpRepository, jwtService: JwtService, mailerService: MailerService, sessionService: ISessionService, roleService: IRoleService);
    login(req: any): Promise<any>;
    logout(sessionId: string): Promise<any>;
    createUser(userDto: any): Promise<SupplierDto | AdminDto>;
    updatePassword(user_id: string, userDto: UserDto): Promise<any>;
    resetPassword(user_id: string, userDto: UserDto): Promise<any>;
    getUserDetailBySessionId(sessionId: string): Promise<UserDto>;
    generateJwtToken(user: UserDto): Promise<string>;
    findUser(filterDto: any): Promise<UserDto>;
    findAllUsers(): Promise<UserDto[]>;
    findAllUsersByFilter(filterDto: any): Promise<UserDto[]>;
    findUserById(user_id: string): Promise<UserDto>;
    updateUserStatus(user_id: string, userDto: UserDto): Promise<UserDto>;
    checkEmailDuplicate(email: string): Promise<boolean>;
    checkForgetPasswordEmail(email: string): Promise<any>;
    checkUsernameDuplicate(username: string): Promise<boolean>;
    checkSupplierStatus(username: string): Promise<any>;
    getRejectionInfo(user_id: string): Promise<any>;
    getAppealInfo(user_id: string): Promise<any>;
    appealRegistration(user_id: string, userDto: UserDto): Promise<any>;
    getProfileInfo(user_id: string): Promise<any>;
    updateProfile(user_id: string, userDto: any): Promise<SupplierDto | AdminDto>;
    createSupplier(supplierDto: SupplierDto): Promise<SupplierDto>;
    findAllSuppliers(): Promise<SupplierDto[]>;
    findAllPendingSuppliers(): Promise<SupplierDto[]>;
    findAllRejectedSuppliers(): Promise<SupplierDto[]>;
    findAllApprovedSuppliers(): Promise<SupplierDto[]>;
    findSupplierById(user_id: string): Promise<SupplierDto>;
    approveSupplierReviewStatus(user_id: string, supplierDto: SupplierDto): Promise<SupplierDto>;
    rejectSupplierReviewStatus(user_id: string, supplierDto: SupplierDto): Promise<SupplierDto>;
    updateSupplierById(user_id: string, supplierDto: SupplierDto): Promise<SupplierDto>;
    createAdmin(adminDto: AdminDto): Promise<AdminDto>;
    findAllAdmins(): Promise<AdminDto[]>;
    findAdminById(user_id: string): Promise<AdminDto>;
    updateAdminById(user_id: string, adminDto: AdminDto): Promise<AdminDto>;
    sendOTP(otpDto: OtpDto): Promise<any>;
    verifyOTP(otpDto: OtpDto, res: Response): Promise<any>;
    getEmail(user_id: string): Promise<any>;
    sendDeleteOTP(otpDto: OtpDto): Promise<any>;
    verifyDeleteOTP(otpDto: OtpDto, res: Response): Promise<any>;
    deleteAccount(user_id: string): Promise<boolean>;
}
