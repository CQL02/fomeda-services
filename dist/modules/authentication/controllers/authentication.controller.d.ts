import { UserDto } from '../dtos/user.dto';
import { SupplierDto } from '../dtos/supplier.dto';
import { SessionDto } from '../dtos/session.dto';
import { IAuthenticationService } from '../services/interfaces/authentication.service.interface';
import { ISessionService } from '../services/interfaces/session.service.interface';
import { AdminDto } from '../dtos/admin.dto';
import { OtpDto } from '../dtos/otp.dto';
import { Response } from 'express';
export declare class AuthenticationController {
    private readonly authenticationService;
    private readonly sessionService;
    constructor(authenticationService: IAuthenticationService, sessionService: ISessionService);
    register(userDto: UserDto): Promise<AdminDto | SupplierDto>;
    login(req: any): Promise<any>;
    logout(sessionDto: SessionDto): Promise<any>;
    checkEmailDuplicate(email: string): Promise<boolean>;
    checkForgetPasswordEmail(email: string): Promise<any>;
    checkUsernameDuplicate(username: string): Promise<boolean>;
    checkSupplierStatus(username: string): Promise<any>;
    getRejectionInfo(user_id: string): Promise<any>;
    getAppealInfo(user_id: string): Promise<any>;
    Appeal(user_id: string, userDto: UserDto): Promise<any>;
    getDetails(session_id: string): Promise<UserDto>;
    getProfileInfo(user_id: string): Promise<any>;
    updateProfile(user_id: string, userDto: UserDto): Promise<AdminDto | SupplierDto>;
    updatePassword(user_id: string, userDto: UserDto): Promise<any>;
    resetPassword(user_id: string, userDto: UserDto): Promise<any>;
    updateUserStatus(user_id: string, userDto: UserDto): Promise<UserDto>;
    findAllPendingSuppliers(): Promise<SupplierDto[]>;
    findAllRejectedSuppliers(): Promise<SupplierDto[]>;
    findAllApprovedSuppliers(): Promise<SupplierDto[]>;
    findSupplierById(user_id: string): Promise<SupplierDto>;
    approveSupplierReviewStatus(user_id: string, supplierDto: SupplierDto): Promise<any>;
    rejectSupplierReviewStatus(user_id: string, supplierDto: SupplierDto): Promise<any>;
    findAllAdmin(): Promise<AdminDto[]>;
    findAdminById(user_id: string): Promise<AdminDto>;
    updateAdmin(user_id: string, adminDto: AdminDto): Promise<AdminDto>;
    sendOtp(otpDto: OtpDto): Promise<boolean>;
    verifyOtp(otpDto: OtpDto, res: Response): Promise<boolean>;
    sendDeleteOtp(otpDto: OtpDto): Promise<any>;
    verifyDeleteOtp(otpDto: OtpDto, res: Response): Promise<any>;
    getEmail(user_id: string): Promise<any>;
    deleteAccount(user_id: string): Promise<boolean>;
}
