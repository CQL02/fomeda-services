import { CategoryDto } from "../dtos/category.dto";
import { GeneralSpecificationDto } from "../dtos/general-specification.dto";
import { GeneralSubspecificationDto } from "../dtos/general-subspecification.dto";
import { SubcategoryDto } from "../dtos/subcategory.dto";
import { BaseSpecificationDto } from "../dtos/base-specification.dto";
import { BaseSubspecificationDto } from "../dtos/base-subspecification.dto";
import { SubcategorySpecificationDto } from "../dtos/subcategory-specification.dto";
import { SubcategorySubspecificationDto } from "../dtos/subcategory-subspecification.dto";
import { IGeneralSpecificationService } from "../services/interfaces/general-specification.service.interface";
import { IBaseSpecificationService } from "../services/interfaces/base-specification.service.interface";
import { ISubcategorySpecificationService } from "../services/interfaces/subcategory-specification.service.interface";
import { ICategoryService } from "../services/interfaces/category.service.interface";
import { ProductFormSpecificationDto } from "../dtos/product-form-specification.dto";
import { Request } from "express";
export declare class CategoryController {
    private readonly categoryService;
    private readonly generalSpecificationService;
    private readonly baseSpecificationService;
    private readonly subcategorySpecificationService;
    constructor(categoryService: ICategoryService, generalSpecificationService: IGeneralSpecificationService, baseSpecificationService: IBaseSpecificationService, subcategorySpecificationService: ISubcategorySpecificationService);
    createCategory(req: Request, categoryDto: CategoryDto): Promise<CategoryDto>;
    updateCategory(req: Request, id: string, categoryDto: CategoryDto): Promise<CategoryDto>;
    findAllCategories(): Promise<CategoryDto[]>;
    findAllActiveCategories(): Promise<CategoryDto[]>;
    findCategoryById(id: string): Promise<CategoryDto>;
    createSubcategory(req: Request, subcategoryDto: SubcategoryDto): Promise<SubcategoryDto>;
    findOneSubcategoryById(id: string): Promise<SubcategoryDto>;
    updateSubcategory(req: Request, id: string, subcategoryDto: SubcategoryDto): Promise<SubcategoryDto>;
    deactivateCategory(req: Request, id: string, is_active: boolean): Promise<CategoryDto>;
    deactivateSubcategory(req: Request, id: string, is_active: boolean): Promise<SubcategoryDto>;
    deleteCategory(id: string): Promise<CategoryDto>;
    deleteSubcategory(id: string): Promise<SubcategoryDto>;
    findNameById(id: string): Promise<import("../dtos/category-name.dto").CategoryNameDto>;
    createGeneralSpecification(req: Request, generalSpecificationDto: GeneralSpecificationDto): Promise<GeneralSpecificationDto>;
    findAllGeneralSpecification(): Promise<GeneralSpecificationDto[]>;
    findGeneralSpecificationById(id: string): Promise<GeneralSpecificationDto>;
    updateGeneralSpecification(req: Request, id: string, generalSpecificationDto: GeneralSpecificationDto): Promise<GeneralSpecificationDto>;
    deactivateGeneralSpecification(req: Request, id: string, is_active: boolean): Promise<GeneralSpecificationDto>;
    deleteGeneralSpecification(id: string): Promise<GeneralSpecificationDto>;
    createGeneralSubspecification(req: Request, generalSubspecificationDto: GeneralSubspecificationDto): Promise<GeneralSubspecificationDto>;
    findGeneralSubspecificationById(id: string): Promise<GeneralSubspecificationDto>;
    findAllGeneralSubspecification(): Promise<GeneralSubspecificationDto[]>;
    updateGeneralSubspecification(req: Request, id: string, generalSubspecificationDto: GeneralSubspecificationDto): Promise<GeneralSubspecificationDto>;
    deactivateGeneralSubspecification(req: Request, id: string, is_active: boolean): Promise<GeneralSubspecificationDto>;
    deleteGeneralSubspecification(id: string): Promise<GeneralSubspecificationDto>;
    createBaseSpecification(req: Request, baseSpecificationDto: BaseSpecificationDto): Promise<BaseSpecificationDto>;
    findBaseSpecificationByCatId(id: string): Promise<BaseSpecificationDto[]>;
    findBaseSpecificationById(id: string): Promise<BaseSpecificationDto>;
    updateBaseSpecification(req: Request, id: string, baseSpecificationDto: BaseSpecificationDto): Promise<BaseSpecificationDto>;
    deactivateBaseSpecification(req: Request, id: string, is_active: boolean): Promise<BaseSpecificationDto>;
    deleteBaseSpecification(id: string): Promise<BaseSpecificationDto>;
    createBaseSubspecification(req: Request, baseSubspecificationDto: BaseSubspecificationDto): Promise<BaseSubspecificationDto>;
    findBaseSubspecificationById(id: string): Promise<BaseSubspecificationDto>;
    updateBaseSubspecification(req: Request, id: string, baseSubspecificationDto: BaseSubspecificationDto): Promise<BaseSubspecificationDto>;
    deactivateBaseSubspecification(req: Request, id: string, is_active: boolean): Promise<BaseSubspecificationDto>;
    deleteBaseSubspecification(id: string): Promise<BaseSubspecificationDto>;
    createSubcategorySpecification(req: Request, subcategorySpecificationDto: SubcategorySpecificationDto): Promise<SubcategorySpecificationDto>;
    findSubcategorySpecificationByCatId(id: string): Promise<SubcategorySpecificationDto[]>;
    findActiveSubcategorySpecificationByCatId(id: string): Promise<SubcategorySpecificationDto[]>;
    findSubcategorySpecificationById(id: string): Promise<SubcategorySpecificationDto>;
    updateSubcategorySpecification(req: Request, id: string, subcategorySpecificationDto: SubcategorySpecificationDto): Promise<SubcategorySpecificationDto>;
    deactivateSubcategorySpecification(req: Request, id: string, is_active: boolean): Promise<SubcategorySpecificationDto>;
    deleteSubcategorySpecification(id: string): Promise<SubcategorySpecificationDto>;
    createSubcategorySubspecification(req: Request, subcategorySubspecificationDto: SubcategorySubspecificationDto): Promise<SubcategorySubspecificationDto>;
    findSubcategorySubspecificationById(id: string): Promise<SubcategorySubspecificationDto>;
    getProductSpecificationBySubcatId(id: string): Promise<ProductFormSpecificationDto[]>;
    updateSubcategorySubspecification(req: Request, id: string, subcategorySubspecificationDto: SubcategorySubspecificationDto): Promise<SubcategorySubspecificationDto>;
    deactivateSubcategorySubspecification(req: Request, id: string, is_active: boolean): Promise<SubcategorySubspecificationDto>;
    deleteSubcategorySubspecification(id: string): Promise<SubcategorySubspecificationDto>;
}
